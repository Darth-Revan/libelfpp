/*
 * MIT License
 *
 * Copyright (c) 2017 Kevin Kirchner
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * \file        private_impl.cpp
 * \brief       Source file implementing classes that should not be
 *              exposed to library users
 * \author      Kevin Kirchner
 * \date        2017
 * \copyright   MIT License
 *
 * This source file implements classes and functions that implement public
 * interfaces and that should not be exposed to the user of the library.
 */

#include "private_impl.h"

namespace libelfpp {

std::map<unsigned int, const std::string> ELFMachineStrings = {
  {EM_NONE, "No Machine"},
  {EM_M32, "AT&T WE 32100"},
  {EM_SPARC, "SPARC"},
  {EM_386, "Intel 80386"},
  {EM_68K, "Motorola m68k"},
  {EM_88K, "Motorola m88k"},
  {EM_860, "Intel 80860"},
  {EM_MIPS, "MIPS R3000"},
  {EM_S370, "IBM System/370"},
  {EM_MIPS_RS3_LE, "MIPS R3000 little-endian"},
  {EM_PARISC, "HPPA"},
  {EM_VPP500, "Fujitsu VPP500"},
  {EM_SPARC32PLUS, "Sun v8plus"},
  {EM_960, "Intel 80960"},
  {EM_PPC, "PowerPC"},
  {EM_PPC64, "64-bit PowerPC"},
  {EM_S390, "IBM S/390"},
  {EM_SPU, "Sony/Toshiba/IBM SPU"},
  {EM_V800, "NEC V800 series"},
  {EM_FR20, "Fujitsu FR20"},
  {EM_RH32, "TRW RH32"},
  {EM_RCE, "Old name for MCore"},
  {EM_ARM, "ARM"},
  {EM_ALPHA, "Digital Alpha"},
  {EM_SH, "Renesas / SuperH SH"},
  {EM_SPARCV9, "SPARC v9 64-bit"},
  {EM_TRICORE, "Siemens Tricore embedded processor"},
  {EM_ARC, "ARC Cores"},
  {EM_H8_300, "Renesas H8/300"},
  {EM_H8_300H, "Renesas H8/300H"},
  {EM_H8S, "Renesas H8S"},
  {EM_H8_500, "Renesas H8/500"},
  {EM_IA_64, "Intel IA-64 Processor"},
  {EM_MIPS_X, "Stanford MIPS-X"},
  {EM_COLDFIRE, "Motorola Coldfire"},
  {EM_68HC12, "Motorola M68HC12"},
  {EM_MMA, "Fujitsu Multimedia Accelerator"},
  {EM_PCP, "Siemens PCP"},
  {EM_NCPU, "Sony nCPU embedded RISC processor"},
  {EM_NDR1, "Denso NDR1 microprocesspr"},
  {EM_STARCORE, "Motorola Star*Core processor"},
  {EM_ME16, "Toyota ME16 processor"},
  {EM_ST100, "STMicroelectronics ST100 processor"},
  {EM_TINYJ, "Advanced Logic Corp. TinyJ embedded processor"},
  {EM_X86_64, "Advanced Micro Devices X86-64 processor"},
  {EM_PDSP, "Sony DSP Processor"},
  {EM_PDP10, "Digital Equipment Corp. PDP-10"},
  {EM_PDP11, "Digital Equipment Corp. PDP-11"},
  {EM_FX66, "Siemens FX66 microcontroller"},
  {EM_ST9PLUS, "STMicroelectronics ST9+ 8/16 bit microcontroller"},
  {EM_ST7, "STMicroelectronics ST7 8-bit microcontroller"},
  {EM_68HC16, "Motorola MC68HC16 Microcontroller"},
  {EM_68HC11, "Motorola MC68HC11 Microcontroller"},
  {EM_68HC08, "Motorola MC68HC08 Microcontroller"},
  {EM_68HC05, "Motorola MC68HC05 Microcontroller"},
  {EM_SVX, "Silicon Graphics SVx"},
  {EM_ST19, "STMicroelectronics ST19 8-bit cpu"},
  {EM_VAX, "Digital VAX"},
  {EM_CRIS, "Axis Communications 32-bit embedded processor"},
  {EM_JAVELIN, "Infineon Technologies 32-bit embedded cpu"},
  {EM_FIREPATH, "Element 14 64-bit DSP processor"},
  {EM_ZSP, "LSI Logic's 16-bit DSP processor"},
  {EM_MMIX, "Donald Knuth's educational 64-bit processor"},
  {EM_HUANY, "Harvard's machine-independent format"},
  {EM_PRISM, "SiTera Prism"},
  {EM_AVR, "Atmel AVR 8-bit microcontroller"},
  {EM_FR30, "Fujitsu FR30"},
  {EM_D10V, "Mitsubishi D10V"},
  {EM_D30V, "Mitsubishi D30V"},
  {EM_V850, "NEC v850"},
  {EM_M32R, "Renesas M32R"},
  {EM_MN10300, "Matsushita MN10300"},
  {EM_MN10200, "Matsushita MN10200"},
  {EM_PJ, "picoJava"},
  {EM_OPENRISC, "OpenRISC 32-bit embedded processor"},
  {EM_ARC_A5, "ARC Cores Tangent-A5"},
  {EM_XTENSA, "Tensilica Xtensa Architecture"},
  {EM_VIDEOCORE, "Alphamosaic VideoCore processor"},
  {EM_TMM_GPP, "Thompson Multimedia General Purpose Processor"},
  {EM_NS32K, "National Semiconductor 32000 series"},
  {EM_TPC, "Tenor Network TPC processor"},
  {EM_SNP1K, "Trebia SNP 1000 processor"},
  {EM_ST200, "STMicroelectronics ST200 microcontroller"},
  {EM_IP2K, "Ubicom IP2022 micro controller"},
  {EM_MAX, "MAX Processor"},
  {EM_CR, "National Semiconductor CompactRISC"},
  {EM_F2MC16, "Fujitsu F2MC16"},
  {EM_MSP430, "TI msp430 micro controller"},
  {EM_BLACKFIN, "ADI Blackfin"},
  {EM_SE_C33, "S1C33 Family of Seiko Epson processors"},
  {EM_SEP, "Sharp embedded microprocessor"},
  {EM_ARCA, "Arca RISC Microprocessor"},
  {EM_UNICORE, "Microprocessor from PKU-Unity Ltd. and MPRC of Peking University"},
  {EM_EXCESS, "eXcess: 16/32/64-bit configurable embedded CPU"},
  {EM_DXP, "Icera Semiconductor Inc. Deep Execution Processor"},
  {EM_ALTERA_NIOS2, "Altera Nios II soft-core processor"},
  {EM_CRX, "National Semiconductor CRX"},
  {EM_XGATE, "Motorola XGATE embedded processor"},
  {EM_C166, "Infineon C16x/XC16x processor"},
  {EM_M16C, "Renesas M16C series microprocessors"},
  {EM_DSPIC30F, "Microchip Technology dsPIC30F Digital Signal Controller"},
  {EM_CE, "Freescale Communication Engine RISC core"},
  {EM_M32C, "Renesas M32C series microprocessors"},
  {EM_TSK3000, "Altium TSK3000 core"},
  {EM_RS08, "Freescale RS08 embedded processor"},
  {EM_ECOG2, "Cyan Technology eCOG2 microprocessor"},
  {EM_SCORE7, "Sunplus S+core7 RISC processor"},
  {EM_DSP24, "New Japan Radio (NJR) 24-bit DSP Processor"},
  {EM_VIDEOCORE3, "Broadcom VideoCore III processor"},
  {EM_LATTICEMICO32, "RISC processor for Lattice FPGA architecture"},
  {EM_SE_C17, "Seiko Epson C17 family"},
  {EM_TI_C6000, "Texas Instruments TMS320C6000 DSP family"},
  {EM_TI_C2000, "Texas Instruments TMS320C2000 DSP family"},
  {EM_TI_C5500, "Texas Instruments TMS320C55x DSP family"},
  {EM_MMDSP_PLUS, "STMicroelectronics 64bit VLIW Data Signal Processor"},
  {EM_CYPRESS_M8C, "Cypress M8C microprocessor"},
  {EM_R32C, "Renesas R32C series microprocessors"},
  {EM_TRIMEDIA, "NXP Semiconductors TriMedia architecture family"},
  {EM_QDSP6, "QUALCOMM DSP6 Processor"},
  {EM_8051, "Intel 8051 and variants"},
  {EM_STXP7X, "STMicroelectronics STxP7x family"},
  {EM_NDS32, "Andes Technology embedded RISC processor family"},
  {EM_ECOG1X, "Cyan Technology eCOG1X family"},
  {EM_MAXQ30, "Dallas Semiconductor MAXQ30 Core Micro-controllers"},
  {EM_XIMO16, "New Japan Radio (NJR) 16-bit DSP Processor"},
  {EM_MANIK, "M2000 Reconfigurable RISC Microprocessor"},
  {EM_CRAYNV2, "Cray Inc. NV2 vector architecture"},
  {EM_RX, "Renesas RX family"},
  {EM_METAG, "Imagination Technologies META processor architecture"},
  {EM_MCST_ELBRUS, "MCST Elbrus general purpose hardware architecture"},
  {EM_ECOG16, "Cyan Technology eCOG16 family"},
  {EM_CR16, "National Semiconductor CompactRISC 16-bit processor"},
  {EM_ETPU, "Freescale Extended Time Processing Unit"},
  {EM_SLE9X, "Infineon Technologies SLE9X core"},
  {EM_L10M, "Intel L1OM"},
  {EM_AVR32, "Atmel Corporation 32-bit microprocessor family"},
  {EM_STM8, "STMicroeletronics STM8 8-bit microcontroller"},
  {EM_TILE64, "Tilera TILE64 multicore architecture family"},
  {EM_TILEPRO, "Tilera TILEPro multicore architecture family"},
  {EM_MICROBLAZE, "Xilinx MicroBlaze 32-bit RISC soft processor core"},
  {EM_CUDA, "NVIDIA CUDA architecture"},
  {EM_TILEGX, "Tilera TILE-Gx multicore architecture family"},
  {EM_CLOUDSHIELD, "CloudShield architecture family"},
  {EM_COREA_1ST, "KIPO-KAIST Core-A 1st generation processor family"},
  {EM_COREA_2ND, "KIPO-KAIST Core-A 2nd generation processor family"},
  {EM_ARC_COMPACT2, "Synopsys ARCompact V2"},
  {EM_OPEN8, "Open8 8-bit RISC soft processor core"},
  {EM_RL78, "Renesas RL78 family"},
  {EM_VIDEOCORE5, "Broadcom VideoCore V processor"},
  {EM_78KOR, "Renesas 78KOR family"},
  {EM_56800EX, "Freescale 56800EX Digital Signal Controller (DSC)"},
  {EM_BA1, "Beyond BA1 CPU architecture"},
  {EM_BA2, "Beyond BA2 CPU architecture"},
  {EM_XCORE, "XMOS xCORE processor family"},
  {EM_MCHP_PIC, "Microchip 8-bit PIC(r) family"},
  {EM_KM32, "KM211 KM32 32-bit processor"},
  {EM_KMX32, "KM211 KMX32 32-bit processor"},
  {EM_KVARC, "KM211 KVARC processor"},
  {EM_CDP, "Paneve CDP architecture family"},
  {EM_COGE, "Cognitive Smart Memory Processor"},
  {EM_COOL, "iCelero CoolEngine"},
  {EM_NORC, "Nanoradio Optimized RISC"},
  {EM_CSR_KALIMBA, "CSR Kalimba architecture family"},
  {EM_Z80, "Zilog Z80"},
  {EM_VISIUM, "Controls and Data Services VISIUMcore processor"},
  {EM_FT32, "FTDI Chip FT32 32-bit RISC architecture"},
  {EM_MOXIE, "Moxie processor family"},
  {EM_AMDGPU, "AMD GPU architecture"},
  {EM_RISCV, "RISC-V"},
  {EM_BPF, "Linux BPF â€“ in-kernel virtual machine"},
  {EM_IAMCU, "Intel MCU"},
  {EM_FAKE_ALPHA, "Digital Alpha"},
  {EM_SHARC, "Analog Devices SHARC Family"},
  {EM_TI_ARP32, "Texas Instruments App. Specific RISC"},
  {EM_TI_PRU, "Texas Instruments Prog. Realtime Unit"},
  {EM_K10M, "Intel K10M"},
  {EM_AARCH64, "ARM AARCH64"},
  {EM_EMX16, "KM211 KMX16"},
  {EM_EMX8, "KM211 KMX8"},
};

std::map<unsigned int, const std::string> ABIStrings = {
    {ELFOSABI_NONE, "System V"},
    {ELFOSABI_HPUX, "HP-UX"},
    {ELFOSABI_NETBSD, "NetBSD"},
    {ELFOSABI_GNU, "GNU/Linux"},
    {ELFOSABI_SOLARIS, "Solaris"},
    {ELFOSABI_AIX, "AIX"},
    {ELFOSABI_IRIX, "IRIX"},
    {ELFOSABI_FREEBSD, "FreeBSD"},
    {ELFOSABI_TRU64, "TRU64"},
    {ELFOSABI_MODESTO, "Modesto"},
    {ELFOSABI_OPENBSD, "OpenBSD"},
    {ELFOSABI_ARM_AEABI, "ARM EABI"},
    {ELFOSABI_ARM, "ARM"},
    {ELFOSABI_STANDALONE, "Standalone (Embedded) application"}
};

std::map<unsigned int, const std::string> SegmentTypeStrings {
    {PT_NULL, "NULL"},
    {PT_LOAD, "LOAD"},
    {PT_DYNAMIC, "DYNAMIC"},
    {PT_INTERP, "INTERPRET"},
    {PT_NOTE, "NOTE"},
    {PT_SHLIB, "SHLIB"},
    {PT_PHDR, "PHDR"},
    {PT_TLS, "TLS"},
    {PT_GNU_EH_FRAME, "GNU_EH_FRAME"},
    {PT_SUNWBSS, "SUNW_UNWBSS"},
    {PT_SUNWSTACK, "SUNWSTACK"},
    {PT_GNU_STACK, "GNU_STACK"},
    {PT_GNU_RELRO, "GNU_RELRO"},
    {PT_MIPS_REGINFO, "MIPS_REGINFO"},
    {PT_MIPS_RTPROC, "MIPS_RTPROC"},
    {PT_MIPS_OPTIONS, "MIPS_OPTIONS"},
    {PT_MIPS_ABIFLAGS, "MIPS_ABIFLAGS"},
};

std::map<unsigned int, const std::string> ELFSectionTypeStrings = {
    {SHT_NULL, "NULL"},
    {SHT_PROGBITS, "PROGBITS"},
    {SHT_SYMTAB, "SYMTAB"},
    {SHT_STRTAB, "STRTAB"},
    {SHT_RELA, "RELA"},
    {SHT_HASH, "HASH"},
    {SHT_DYNAMIC, "DYNAMIC"},
    {SHT_NOTE, "NOTE"},
    {SHT_NOBITS, "NOBITS"},
    {SHT_REL, "REL"},
    {SHT_SHLIB, "SHLIB"},
    {SHT_DYNSYM, "DYNSYM"},
    {SHT_INIT_ARRAY, "INIT_ARRAY"},
    {SHT_FINI_ARRAY, "FINI_ARRAY"},
    {SHT_PREINIT_ARRAY, "PREINIT_ARRAY"},
    {SHT_GROUP, "GROUP"},
    {SHT_SYMTAB_SHNDX, "SYMTAB_SHDNX"},
    {SHT_GNU_ATTRIBUTES, "GNU_ATTR"},
    {SHT_GNU_HASH, "GNU_HASH"},
    {SHT_GNU_verdef, "GNU_VERDEF"},
    {SHT_GNU_verneed, "GNU_VERNEED"},
    {SHT_GNU_versym, "GNU_VERSYM"},
    {SHT_GNU_LIBLIST, "GNU_LIBLIST"},
    {SHT_CHECKSUM, "CHECKSUM"},
    {SHT_SUNW_move, "SUNW_MOVE"},
    {SHT_SUNW_COMDAT, "SUNW_COMDAT"},
    {SHT_SUNW_syminfo, "SUNW_SYMINFO"}
};

std::map<unsigned int, const char> SectionFlagChars {
    {SHF_WRITE, 'W'},
    {SHF_ALLOC, 'A'},
    {SHF_EXECINSTR, 'X'},
    {SHF_MERGE, 'M'},
    {SHF_STRINGS, 'S'},
    {SHF_INFO_LINK, 'I'},
    {SHF_LINK_ORDER, 'L'},
    {SHF_GROUP, 'G'},
    {SHF_TLS, 'T'},
    {SHF_OS_NONCONFORMING, 'O'},
    {SHF_MASKOS, 'o'},
    {SHF_MASKPROC, 'p'},
    {SHF_EXCLUDE, 'E'}
};

}